%function [total_e] = minimizer_target(constants, positions, phos_state)

e_params.S = 1e9; % spring constant for microtubule (0.38 - 2 GPa)
e_params.B = 7e-24; % bending rigidity for microtubule (7e-25 - 7e-23 Nm^2)
e_params.k = 1; % resting spring length between substrate and dimer
e_params.theta = 23; % preferred angle for gdp tubulin

constants = e_params;

% % pull out constants
S = constants.S;  % spring const
B = constants.B; % bending const
k = constants.k; % resting spring length
theta = constants.theta; % dephosphor angle

% % pull out other parameters
% num_dimers = size(positions,2);



num_dimers = 1;
phos_state = zeros(num_dimers, 1);



% create string to define variables
x_string = ''; y_string = '';
for i = 1 : num_dimers
    x_string = strcat(x_string, 'x', num2str(i), ',');
    y_string = strcat(y_string, 'y', num2str(i), ',');
end
full_var_string = strcat('@(',x_string, y_string(1:end-1),')');

% create minimization function
spring_total = ''; bend_total = '';
for i = 2 : num_dimers
    spring_part = strcat('0.5*',num2str(S),'(y',num2str(i),'-',num2str(k),')');
    spring_total = strcat(spring_total,spring_part,'+');
    
    alpha = strcat('atan(abs(y',num2str(i),'-y',num2str(i-1),')/abs(x',num2str(i),'-x',num2str(i-1),'))');
    beta = strcat('atan(abs(y',num2str(i+1),'-y',num2str(i),')/abs(x',num2str(i+1),'-x',num2str(i),'))');
    dimer_theta = strcat('pi-(',alpha,'+',beta,')');
    if phos_state(i) == 0
        adjusted_angle = strcat(dimer_theta,'-',num2str(theta));
    else
        adjusted_angle = dimer_theta;
    end
    bend_part = strcat('
    
    
    
    %bend_total = strcat(bend_total,bend_part,'+');
end
spring_total = spring_total(1:end-1)




% 
% % for the minimization, assume that each dimer can only move in y, so the
% % three options for the next position are +dy,0,-dy
% 
%                 delta_e = 1;
%                 prev_e = 100;
%                 while (delta_e > 1e-3)
% 
% 
% 
%                     total_e= 0;
%                     for i = 2 : (size(positions, 2)-1)
%                         spring_energy = 0.5*S*(positions(2,i) - k);
% 
%                         alpha = atan( abs(temp_positions(2,i)-temp_positions(2,i-1))/abs(temp_positions(1,i)-temp_positions(1,i-1)) );
%                         beta = atan( abs(temp_positions(2,i+1)-temp_positions(2,i))/abs(temp_positions(1,i+1)-temp_positions(1,i)) );
%                         dimer_theta = pi - (alpha+beta);
%                         adjusted_angle = dimer_theta - (1-phos_state(i))*theta;
%                         bending_energy = -B*cos(adjusted_angle);
% 
%                         dimer_energy = spring_energy + bending_energy;
%                         total_e = total_e + dimer_energy;
%                     end
% 
%                     delta_e = abs(prev_e - total_e);
% 
% 
% 
%     
%end
